# iOS Build Pipeline for Google Cloud Build
steps:
  # Stage 1: Setup Build Environment
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'setup-environment'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up iOS build environment..."
        
        # Install Ruby and dependencies
        brew install rbenv ruby-build
        eval "$(rbenv init -)"
        rbenv install 3.1.4
        rbenv global 3.1.4
        rbenv rehash
        
        # Install bundler and fastlane
        gem install bundler -v 2.4.22
        gem install fastlane -N
        
        # Install bundle dependencies
        bundle install || echo "No Gemfile found, skipping bundle install"
        
        echo "Environment setup complete"

  # Stage 2: Build iOS App
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'build-ios-app'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building iOS application..."
        
        # Clean and build the iOS app
        xcodebuild clean build \
          -project "Number  Counter Application.xcodeproj" \
          -scheme "Number  Counter Application" \
          -configuration Release \
          -sdk iphonesimulator \
          -derivedDataPath build
        
        # Also create an archive for App Store deployment
        xcodebuild archive \
          -project "Number  Counter Application.xcodeproj" \
          -scheme "Number  Counter Application" \
          -configuration Release \
          -archivePath build/CounterApp.xcarchive
        
        echo "iOS build completed successfully"
    waitFor: ['setup-environment']

  # Stage 3: Prepare Release Artifacts
  - name: 'bash'
    id: 'prepare-release'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Preparing release artifacts..."
        
        # Create artifacts directory
        mkdir -p artifacts
        
        # Copy build products
        if [ -d "build/Build/Products/Release-iphonesimulator" ]; then
          cp -r build/Build/Products/Release-iphonesimulator/* artifacts/
        fi
        
        # Copy archive if it exists
        if [ -d "build/CounterApp.xcarchive" ]; then
          cp -r build/CounterApp.xcarchive artifacts/
        fi
        
        # Create version file
        echo "${_VERSION_PREFIX}-$(date +%Y%m%d)-$BUILD_ID" > artifacts/version.txt
        echo "Building version: $(cat artifacts/version.txt)"
        
        # List artifacts for verification
        echo "Artifacts prepared:"
        ls -la artifacts/
    waitFor: ['build-ios-app']

  # Stage 4: Upload to Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'upload-to-storage'
    args:
      - 'cp'
      - '-r'
      - 'artifacts/*'
      - 'gs://${_BUCKET_NAME}/ios-builds/${_ENVIRONMENT}/'
    waitFor: ['prepare-release']

  # Stage 5: Get App Store Credentials (Production only)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'fetch-appstore-credentials'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "production" ]; then
          echo "Fetching App Store Connect credentials..."
          
          # Create directory for credentials
          mkdir -p /workspace/credentials
          
          # Fetch App Store Connect API key
          gcloud secrets versions access latest --secret="appstore-api-key" > /workspace/credentials/raw_key.p8
          
          # Validate the key file
          if [ ! -s /workspace/credentials/raw_key.p8 ]; then
            echo "Error: App Store API key file is empty"
            exit 1
          fi
          
          # Move to final location
          mv /workspace/credentials/raw_key.p8 appstore_key.p8
          chmod 600 appstore_key.p8
          
          echo "App Store credentials configured successfully"
        else
          echo "Skipping App Store credentials for non-production environment"
        fi
    waitFor: ['prepare-release']

  # Stage 6: Deploy to App Store (Production only)
  - name: 'ruby:3.1'
    id: 'deploy-to-appstore'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "production" ]; then
          set -e
          
          echo "Installing required gems..."
          gem install bundler fastlane -N

          echo "Creating Fastfile for iOS deployment..."
          mkdir -p fastlane
          cat > fastlane/Fastfile <<EOF
          default_platform(:ios)
          
          platform :ios do
            desc "Upload to TestFlight"
            lane :deploy_testflight do
              # First, export the IPA from the archive
              export_archive(
                archive_path: "artifacts/CounterApp.xcarchive",
                output_directory: "artifacts",
                output_name: "CounterApp.ipa",
                export_method: "app-store"
              )
              
              # Upload to TestFlight
              upload_to_testflight(
                api_key_path: "appstore_key.p8",
                issuer_id: "${_APP_STORE_ISSUER_ID}",
                key_id: "${_API_KEY_ID}",
                ipa: "artifacts/CounterApp.ipa",
                skip_waiting_for_build_processing: true
              )
            end
          end
          EOF

          echo "Verifying required files exist..."
          if [ ! -f appstore_key.p8 ]; then
            echo "Error: appstore_key.p8 not found"
            exit 1
          fi

          if [ ! -d artifacts/CounterApp.xcarchive ]; then
            echo "Error: CounterApp.xcarchive not found"
            ls -la artifacts/
            exit 1
          fi

          echo "Deploying to App Store..."
          fastlane ios deploy_testflight
        else
          echo "Skipping App Store deployment for non-production environment"
        fi
    waitFor: ['upload-to-storage', 'fetch-appstore-credentials']

# Define timeout
timeout: '2400s'  # 40 minutes

# Define substitutions
substitutions:
  _BUCKET_NAME: 'counter_gitcicd_app'
  _VERSION_PREFIX: '1.0.3'
  _ENVIRONMENT: 'staging'  # Default to staging, override for production
  _APP_STORE_ISSUER_ID: ''  # Set in trigger or environment
  _API_KEY_ID: ''  # Set in trigger or environment

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Tags
tags:
  - 'ios'
  - 'counter-app'
  - 'xcode' 