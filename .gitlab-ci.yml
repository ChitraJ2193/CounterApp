image: 
  name: macos:latest
  entrypoint: [""]

variables:
  PROJECT_ID: "counterapplication-460304"
  PROJECT_NUMBER: "189419000467"
  APP_NAME: "CounterApp"
  XCODE_PROJECT: "Number  Counter Application.xcodeproj"
  XCODE_SCHEME: "Number  Counter Application"
  APPLE_TEAM_ID: "${APPLE_TEAM_ID}"
  APPLE_DISTRIBUTION_CERTIFICATE: "${APPLE_DISTRIBUTION_CERTIFICATE}"
  APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: "${APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD}"
  APPLE_PROVISIONING_PROFILE: "${APPLE_PROVISIONING_PROFILE}"
  FASTLANE_USER: "${FASTLANE_USER}"
  FASTLANE_PASSWORD: "${FASTLANE_PASSWORD}"
  MATCH_PASSWORD: "${MATCH_PASSWORD}"
  LC_ALL: "en_US.UTF-8"
  LANG: "en_US.UTF-8"
  FASTLANE_SKIP_UPDATE_CHECK: "true"
  FASTLANE_HIDE_TIMESTAMP: "true"
  FASTLANE_DISABLE_OUTPUT_FORMATTING: "true"
  FASTLANE_SILENT: "true"
  RUBYOPT: "-W0"
  BUNDLE_GEMFILE: "${CI_PROJECT_DIR}/Gemfile"
  FASTLANE_VERSION: "2.210.1"
  RUBY_VERSION: "3.0.6"

stages:
  - setup
  - lint
  - test
  - build
  - deploy

before_script:
  - brew uninstall --force ruby@3.2 || true
  - brew uninstall --force ruby@3.1 || true
  - brew uninstall --force ruby@3.0 || true
  - brew install ruby@3.0 swiftlint
  - echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.bash_profile
  - source ~/.bash_profile
  - echo 'export PATH="/opt/homebrew/opt/ruby@3.0/bin:$PATH"' >> ~/.bash_profile
  - echo 'export LDFLAGS="-L/opt/homebrew/opt/ruby@3.0/lib"' >> ~/.bash_profile
  - echo 'export CPPFLAGS="-I/opt/homebrew/opt/ruby@3.0/include"' >> ~/.bash_profile
  - source ~/.bash_profile
  - which ruby
  - ruby -v
  - rm -rf vendor/bundle
  - rm -f Gemfile.lock
  - gem uninstall bundler --all || true
  - gem install bundler -v 2.4.22 --user-install
  - export BUNDLE_PATH="${CI_PROJECT_DIR}/vendor/bundle"
  - export BUNDLE_BIN="${CI_PROJECT_DIR}/vendor/bundle/bin"
  - export PATH="${BUNDLE_BIN}:${PATH}"
  - export RUBY_THREAD_VM_STACK_SIZE=1048576
  - export RUBY_GC_HEAP_GROWTH_MAX_SLOTS=40000
  - export RUBY_GC_HEAP_INIT_SLOTS=40000
  - export RUBYLIB=""
  - export GEM_PATH=""
  - export GEM_HOME="${CI_PROJECT_DIR}/vendor/bundle"
  - bundle config set --local path 'vendor/bundle'
  - bundle config set clean 'true'
  - bundle config set --local without 'development test'
  - bundle config set --local deployment 'false'
  - bundle config set --local system 'false'
  - bundle install --jobs=4 --retry=3

setup:
  stage: setup
  tags:
    - macOS
  script:
    - export FASTLANE_SKIP_UPDATE_CHECK=true
    - export FASTLANE_HIDE_TIMESTAMP=true
    - export FASTLANE_DISABLE_OUTPUT_FORMATTING=true
    - export FASTLANE_SILENT=true
    - export FASTLANE_DISABLE_COLORS=true
    - export FASTLANE_HIDE_TIMESTAMP=true
    - export FASTLANE_SKIP_UPDATE_CHECK=true
    - export FASTLANE_DISABLE_OUTPUT_FORMATTING=true
    - export FASTLANE_SILENT=true
    - bundle exec fastlane setup_ci --verbose
    - xcodebuild -list -project "$XCODE_PROJECT"
    - xcodebuild -scheme "$XCODE_SCHEME" -project "$XCODE_PROJECT" -showBuildSettings
  artifacts:
    paths:
      - vendor/bundle/
      - Gemfile.lock
    expire_in: 1 week

lint:
  stage: lint
  tags:
    - macOS
  script:
    - swiftlint lint
  allow_failure: true

test:
  stage: test
  tags:
    - macOS
  script:
    - export FASTLANE_SKIP_UPDATE_CHECK=true
    - export FASTLANE_HIDE_TIMESTAMP=true
    - export FASTLANE_DISABLE_OUTPUT_FORMATTING=true
    - export FASTLANE_SILENT=true
    - export FASTLANE_DISABLE_COLORS=true
    - bundle exec fastlane test --verbose
  artifacts:
    reports:
      junit: build/reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: build/reports/coverage.xml
    paths:
      - build/reports/
    expire_in: 1 week

build:
  stage: build
  tags:
    - macOS
  script:
    - export FASTLANE_SKIP_UPDATE_CHECK=true
    - export FASTLANE_HIDE_TIMESTAMP=true
    - export FASTLANE_DISABLE_OUTPUT_FORMATTING=true
    - export FASTLANE_SILENT=true
    - export FASTLANE_DISABLE_COLORS=true
    - bundle exec fastlane build --verbose
  artifacts:
    paths:
      - build/
    expire_in: 1 week

deploy_staging:
  stage: deploy
  tags:
    - macOS
  script:
    - echo "$GCP_SERVICE_KEY" > ${CI_PROJECT_DIR}/gcp-key.json
    - gcloud auth activate-service-account --key-file=${CI_PROJECT_DIR}/gcp-key.json
    - gcloud config set project $PROJECT_ID
    - gsutil cp -r build/Build/Products/Release-iphonesimulator/* gs://counter_gitcicd_app/ios-builds/staging/
  environment:
    name: staging
  only:
    - develop

deploy_production:
  stage: deploy
  tags:
    - macOS
  script:
    - echo "$GCP_SERVICE_KEY" > ${CI_PROJECT_DIR}/gcp-key.json
    - gcloud auth activate-service-account --key-file=${CI_PROJECT_DIR}/gcp-key.json
    - gcloud config set project $PROJECT_ID
    - gsutil cp -r build/Build/Products/Release-iphonesimulator/* gs://counter_gitcicd_app/ios-builds/production/
  environment:
    name: production
  only:
    - main
  when: manual

deploy_testflight:
  stage: deploy
  tags:
    - macOS
  script:
    - export FASTLANE_SKIP_UPDATE_CHECK=true
    - export FASTLANE_HIDE_TIMESTAMP=true
    - export FASTLANE_DISABLE_OUTPUT_FORMATTING=true
    - export FASTLANE_SILENT=true
    - export FASTLANE_DISABLE_COLORS=true
    - bundle exec fastlane beta --verbose
  only:
    - main
  when: manual 
