image: xcode:14.3

variables:
  PROJECT_ID: "counterapplication-460304"
  PROJECT_NUMBER: "189419000467"
  APP_NAME: "CounterApp"

stages:
  - build
  - deploy

before_script:
  - gem install bundler
  - bundle install

build:
  stage: build
  script:
    - xcodebuild -scheme CounterApp -configuration Release -sdk iphonesimulator
  artifacts:
    paths:
      - build/Release-iphonesimulator/
    expire_in: 1 week

deploy:
  stage: deploy
  script:
    - echo "Starting deployment process..."
    - echo "Installing Google Cloud SDK..."
    - curl https://sdk.cloud.google.com | bash
    - source $HOME/google-cloud-sdk/path.bash.inc
    
    # Debug: Print current directory and list files
    - pwd
    - ls -la
    
    # Debug: Check if service account key file exists
    - if [ -f "$GOOGLE_CLOUD_KEY_FILE" ]; then echo "Service account key file exists"; else echo "Service account key file not found"; fi
    
    - echo "Authenticating with Google Cloud..."
    - gcloud auth activate-service-account --key-file=$GOOGLE_CLOUD_KEY_FILE || { echo "Failed to authenticate with Google Cloud"; exit 1; }
    
    - echo "Setting project..."
    - gcloud config set project $PROJECT_ID || { echo "Failed to set project"; exit 1; }
    
    # Enable required APIs
    - echo "Enabling required APIs..."
    - gcloud services enable cloudbuild.googleapis.com || { echo "Failed to enable Cloud Build API"; exit 1; }
    - gcloud services enable cloudresourcemanager.googleapis.com || { echo "Failed to enable Cloud Resource Manager API"; exit 1; }
    - gcloud services enable iam.googleapis.com || { echo "Failed to enable IAM API"; exit 1; }
    - gcloud services enable run.googleapis.com || { echo "Failed to enable Cloud Run API"; exit 1; }
    - gcloud services enable logging.googleapis.com || { echo "Failed to enable Logging API"; exit 1; }
    
    # Add IAM policy binding with specific project number
    - echo "Setting up IAM permissions..."
    - gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$PROJECT_NUMBER@cloudbuild.gserviceaccount.com" \
        --role="roles/cloudbuild.builds.builder" || { echo "Failed to add Cloud Build builder role"; exit 1; }
    
    # Add logging permissions
    - gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$PROJECT_NUMBER@cloudbuild.gserviceaccount.com" \
        --role="roles/logging.logWriter" || { echo "Failed to add logging role"; exit 1; }
    
    # Generate a secret token for webhook
    - echo "Generating webhook secret..."
    - export WEBHOOK_SECRET=$(openssl rand -base64 32)
    - echo "================================================"
    - echo "IMPORTANT: WEBHOOK SECRET FOR GITLAB CONFIGURATION"
    - echo "================================================"
    - echo "Please copy this secret and use it in GitLab webhook configuration:"
    - echo "$WEBHOOK_SECRET"
    - echo "================================================"
    
    # Configure webhook with authentication
    - echo "Configuring webhook..."
    - gcloud builds triggers create webhook \
        --name="gitlab-webhook" \
        --description="GitLab webhook trigger" \
        --branch-pattern="main" \
        --build-config="cloudbuild.yaml" \
        --service-account="projects/$PROJECT_ID/serviceAccounts/$PROJECT_NUMBER@cloudbuild.gserviceaccount.com" \
        --webhook-config-url="https://cloudbuild.googleapis.com/v1/projects/$PROJECT_ID/triggers/gitlab-webhook:run" \
        --webhook-config-secret="$WEBHOOK_SECRET" || { echo "Failed to create webhook trigger"; exit 1; }
    
    - echo "Deployment process completed successfully!"
  only:
    - main  # Only deploy from main branch
  environment:
    name: production 