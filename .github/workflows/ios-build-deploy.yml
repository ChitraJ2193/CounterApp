name: iOS Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: "counterapplication-460304"
  PROJECT_NUMBER: "189419000467"
  APP_NAME: "CounterApp"
  XCODE_PROJECT: "Number  Counter Application.xcodeproj"
  XCODE_SCHEME: "Number  Counter Application"
  BUCKET_NAME: "counter_gitcicd_app"
  VERSION_PREFIX: "1.0.3"

jobs:
  build-and-deploy:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    # Stage 1: Checkout Code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Stage 2: Setup Xcode
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    # Stage 3: Debug Project Structure
    - name: Debug Project Structure
      run: |
        echo "üîç Debugging project structure..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo ""
        echo "Looking for Xcode project:"
        find . -name "*.xcodeproj" -type d
        echo ""
        echo "Project contents:"
        ls -la "$XCODE_PROJECT" || echo "Project not found"
        
    # Stage 4: Cache dependencies
    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
          
    # Stage 5: Install Ruby dependencies
    - name: Install Ruby dependencies
      run: |
        gem install bundler
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        
    # Stage 6: Build iOS App
    - name: Build iOS App for Simulator
      run: |
        echo "üèóÔ∏è Building iOS app for simulator..."
        
        # Set up variables with proper quoting
        PROJECT_PATH="${{ github.workspace }}/$XCODE_PROJECT"
        BUILD_PATH="${{ github.workspace }}/build"
        
        echo "Project path: $PROJECT_PATH"
        echo "Build path: $BUILD_PATH"
        
        # Clean any existing build
        rm -rf "$BUILD_PATH"
        
        # Build for simulator with explicit paths
        xcodebuild clean build \
          -project "$PROJECT_PATH" \
          -scheme "$XCODE_SCHEME" \
          -configuration Release \
          -sdk iphonesimulator \
          -derivedDataPath "$BUILD_PATH" \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
        
        echo "‚úÖ Build command completed"
        echo "Build directory structure:"
        find "$BUILD_PATH" -type f -name "*.app" 2>/dev/null || echo "No .app files found"
        find "$BUILD_PATH" -type d -name "*.app" 2>/dev/null || echo "No .app directories found"
        
    # Stage 7: Locate and Prepare Artifacts
    - name: Locate and Prepare Artifacts
      run: |
        echo "üìÅ Locating and preparing artifacts..."
        
        # Create artifacts directory
        mkdir -p artifacts
        
        echo "=== BUILD DIRECTORY ANALYSIS ==="
        BUILD_PATH="${{ github.workspace }}/build"
        
        if [ -d "$BUILD_PATH" ]; then
          echo "Build directory exists. Full structure:"
          find "$BUILD_PATH" -type f | head -20
          echo ""
          
          echo "Looking for .app bundles:"
          find "$BUILD_PATH" -name "*.app" -type d
          
          echo "Looking for specific paths:"
          if [ -d "$BUILD_PATH/Build/Products" ]; then
            echo "Found Build/Products directory:"
            ls -la "$BUILD_PATH/Build/Products/"
            
            # Check for Release-iphonesimulator
            if [ -d "$BUILD_PATH/Build/Products/Release-iphonesimulator" ]; then
              echo "Found Release-iphonesimulator directory:"
              ls -la "$BUILD_PATH/Build/Products/Release-iphonesimulator/"
              cp -r "$BUILD_PATH/Build/Products/Release-iphonesimulator"/* artifacts/
              echo "Copied simulator build products"
            else
              echo "Release-iphonesimulator not found, checking other Release directories:"
              find "$BUILD_PATH/Build/Products" -name "Release*" -type d
            fi
          else
            echo "Build/Products not found, searching entire build directory for .app files:"
            find "$BUILD_PATH" -name "*.app" -type d -exec cp -r {} artifacts/ \;
          fi
        else
          echo "‚ùå Build directory does not exist!"
        fi
        
        # Always create version file
        echo "${VERSION_PREFIX}-$(date +%Y%m%d)-${{ github.run_id }}" > artifacts/version.txt
        echo "Building version: $(cat artifacts/version.txt)"
        
        # Create a simple test file to ensure artifacts directory has content
        echo "Build completed at $(date)" > artifacts/build-info.txt
        echo "GitHub Run ID: ${{ github.run_id }}" >> artifacts/build-info.txt
        
        echo "=== FINAL ARTIFACTS ==="
        echo "Artifacts directory contents:"
        ls -la artifacts/
        
        # Ensure we have at least some content
        if [ ! "$(ls -A artifacts/)" ]; then
          echo "‚ö†Ô∏è Artifacts directory is empty, creating minimal artifacts..."
          echo "No build outputs found" > artifacts/build-status.txt
        fi
        
    # Stage 8: Setup Google Cloud CLI
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SERVICE_KEY }}
        export_default_credentials: true
        
    # Stage 9: Upload to Cloud Storage
    - name: Upload to Cloud Storage
      run: |
        # Determine environment based on branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT="production"
        else
          ENVIRONMENT="staging"
        fi
        
        echo "Deploying to environment: $ENVIRONMENT"
        
        # Upload artifacts to GCS (always upload what we have)
        echo "üì§ Uploading artifacts to GCS..."
        echo "Current artifacts:"
        ls -la artifacts/
        
        # Upload all files in artifacts directory
        if [ "$(ls -A artifacts/)" ]; then
          gsutil -m cp -r artifacts/* gs://${{ env.BUCKET_NAME }}/ios-builds/$ENVIRONMENT/
          echo "‚úÖ Upload completed"
          
          # Upload versioned file if it exists
          if [ -f "artifacts/version.txt" ]; then
            gsutil cp artifacts/version.txt gs://${{ env.BUCKET_NAME }}/ios-builds/$ENVIRONMENT/latest-version.txt
          fi
        else
          echo "‚ö†Ô∏è No artifacts to upload"
        fi
        
    # Stage 10: Archive Build Artifacts (Always try to archive something)
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts-${{ github.run_id }}
        path: |
          artifacts/
          build/
        retention-days: 7
        if-no-files-found: warn 