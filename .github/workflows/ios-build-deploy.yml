name: iOS Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: "counterapplication-460304"
  PROJECT_NUMBER: "189419000467"
  APP_NAME: "CounterApp"
  XCODE_PROJECT: "Number  Counter Application.xcodeproj"
  XCODE_SCHEME: "Number  Counter Application"
  BUCKET_NAME: "counter_gitcicd_app"
  VERSION_PREFIX: "1.0.3"

jobs:
  build-and-deploy:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    # Stage 1: Checkout Code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Stage 2: Setup Xcode
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    # Stage 3: List available simulators
    - name: List available simulators
      run: |
        echo "📱 Available iOS Simulators:"
        xcrun simctl list devices | grep iPhone | head -5
        
    # Stage 4: Simple iOS Build Test
    - name: Simple iOS Build Test
      run: |
        echo "🏗️ Starting simple iOS build..."
        
        # Create build directory
        mkdir -p build-output
        
        # List project info first
        echo "Project information:"
        xcodebuild -list -project "$XCODE_PROJECT"
        
        echo ""
        echo "Starting build with specific destination..."
        
        # Simple build command with explicit destination
        xcodebuild build \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -configuration Release \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -derivedDataPath build-output \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
        
        echo "✅ Build completed successfully"
        
    # Stage 5: Find and Package Build Outputs
    - name: Find and Package Build Outputs
      run: |
        echo "📦 Searching for build outputs..."
        
        # Create artifacts directory
        mkdir -p artifacts
        
        # Search for .app bundles
        echo "Looking for .app files in build-output:"
        find build-output -name "*.app" -type d | while read app_path; do
          if [ -d "$app_path" ]; then
            echo "Found: $app_path"
            app_name=$(basename "$app_path")
            cp -r "$app_path" "artifacts/$app_name"
            echo "Copied $app_name to artifacts"
          fi
        done
        
        # Search for any built products
        echo ""
        echo "All build products:"
        find build-output -name "*.app" -o -name "*.dSYM" -o -name "*.swiftmodule" | head -10
        
        # Create version and build info files
        echo "${VERSION_PREFIX}-$(date +%Y%m%d)-${{ github.run_id }}" > artifacts/version.txt
        echo "Build completed: $(date)" > artifacts/build-info.txt
        echo "GitHub Runner: ${{ runner.os }}" >> artifacts/build-info.txt
        echo "Xcode Version: $(xcodebuild -version | head -1)" >> artifacts/build-info.txt
        
        # Always ensure we have some content
        echo "iOS CounterApp v2.0 - Built on GitHub Actions" > artifacts/README.txt
        
        echo ""
        echo "Final artifacts:"
        ls -la artifacts/
        
        # Count files to ensure we have content
        file_count=$(ls -1 artifacts/ | wc -l)
        echo "Total artifacts: $file_count"
        
    # Stage 6: Setup Google Cloud CLI
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SERVICE_KEY }}
        export_default_credentials: true
        
    # Stage 7: Upload to Cloud Storage
    - name: Upload to Cloud Storage
      run: |
        # Determine environment based on branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT="production"
        else
          ENVIRONMENT="staging"
        fi
        
        echo "🚀 Uploading to GCS environment: $ENVIRONMENT"
        echo "Artifacts to upload:"
        ls -la artifacts/
        
        # Upload everything in artifacts
        gsutil -m cp -r artifacts/* gs://${{ env.BUCKET_NAME }}/ios-builds/$ENVIRONMENT/
        
        # Upload version file as latest
        if [ -f "artifacts/version.txt" ]; then
          gsutil cp artifacts/version.txt gs://${{ env.BUCKET_NAME }}/ios-builds/$ENVIRONMENT/latest-version.txt
        fi
        
        echo "✅ Upload completed to gs://${{ env.BUCKET_NAME }}/ios-builds/$ENVIRONMENT/"
        
    # Stage 8: Archive Build Artifacts
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-${{ github.run_id }}
        path: artifacts/
        retention-days: 7 